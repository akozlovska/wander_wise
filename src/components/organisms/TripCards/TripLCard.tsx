'use client';

import { useState } from "react";
import { AnimatePresence } from "framer-motion";
import { useRouter } from "next/navigation";
import { 
  Divider, 
  Heading2, 
  Heading4, 
  Icons, 
  Heading5 
} from "@/src/components/atoms";
import {
  IconButton,
  SaveButton,
  LikeButton,
} from "@/src/components/molecules";
import { 
  CardImagesSection, 
  Tabs, 
  CreateReportModal 
} from "@/src/components/organisms";
import { useCopyUrlToClipboard } from "@/src/hooks";
import { Routes } from "@/src/lib/constants";
import { ICard, ICardTabs } from "@/src/services";
import { useUser } from "@/src/store/user";

interface TripLCardProps {
  card: ICard;
}

const TripLCard: React.FC<TripLCardProps> = ({ card }) => {
  const tabs: ICardTabs = {
    'Description': card.description,
    'Why this place?': card.whyThisPlace,
    'Map': { latitude: card.latitude, longitude: card.longitude},
  };

  const [isCopied, copy] = useCopyUrlToClipboard(Routes.TRIP(card.id));
  const [isReportCardModal, setIsReportCardModal] = useState(false);
  const { user } = useUser();
  const { push } = useRouter();

  const isCardCreatedByUser = card.author === user?.pseudonym;

  return (
    <article
      className="flex flex-col items-center
      justify-between gap-2"
    >
      <Heading2 text={card.name} classes="self-start mb-1" font="semibold" />

      <div className="grid w-full grid-cols-12 gap-x-6 gap-y-5">
        <div className="col-span-5 row-span-1">
          <div className="flex w-full gap-2">
            <Icons.location className="h-8 w-8" />
            <Heading4 text={card.whereIs} font="normal"/>
          </div>
        </div>

        <div className="col-span-7 row-span-1 self-end">
          <div className="relative flex h-8 w-full justify-end gap-4">
            {isCopied && (
              <span 
                className="absolute bottom-[44px] right-0 flex 
              items-center  justify-center rounded-2xl bg-white px-6 py-2"
              >
                <Heading5 
                  text="Copied to clipboard!" 
                  font="medium" 
                  classes="text-gray-80" 
                />
              </span>
            )}

            <LikeButton
              cardId={card.id}
              cardLikes={card.likes}
              classes="disabled:text-gray-50"
            />

            <Divider classes="h-full w-px" />

            <IconButton
              icon={card.author === "AI" 
                ? <Icons.jpt className="h-5 w-5" /> 
                : <Icons.user className="h-5 w-5" />
              }
              text={
                card.author === "AI" ? "Generated by AI" : card.author
              }
              classes="bg-black text-white rounded-full gap-2"
            />

            <IconButton
              icon={<Icons.report className="h-5 w-5" />}
              text="Report Issue"
              classes="bg-transparent border border-error 
              text-error rounded-full 
              disabled:text-gray-50 disabled:border-gray-50"
              onClick={() => setIsReportCardModal(true)}
              disabled={!user}
            />

            {isCardCreatedByUser && (
              <>
                <Divider classes="h-full w-px" />

                <IconButton 
                  icon={<Icons.edit className="h-6 w-6" />} 
                  onClick={() => push(Routes.MY_CARDS.EDIT(card.id))}
                />
              </>
            )}

            <Divider classes="h-full w-px" />

            <IconButton 
              icon={<Icons.share className="h-6 w-6" />} 
              onClick={copy}
            />
          </div>
        </div>

        <div className="col-span-5 row-span-1 flex flex-col gap-6">
          <div 
            className="max-h-[546px] grow overflow-hidden rounded-3xl 
            border-2 border-gray-300 bg-white p-8"
          >
            <Tabs tabs={tabs} location="Page" />
          </div>
          <SaveButton cardId={card.id} />
        </div>

        <div className="col-span-7 row-span-1">
          <CardImagesSection images={card.imageLinks} />
        </div>
      </div>
      
      <AnimatePresence>
        {isReportCardModal && (
          <CreateReportModal 
            key="createReportModal"
            type="Card" 
            onClose={() => setIsReportCardModal(false)} 
          />
        )}
      </AnimatePresence>
    </article>
  );
};

export default TripLCard;
