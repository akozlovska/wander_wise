"use client";

import { forwardRef, memo, Ref, useState } from "react";
import { AnimatePresence, motion } from "framer-motion";
import Link from "next/link";
import { 
  TripImage, 
  IconButton, 
  LikeButton, 
  SaveButton 
} from "@/src/components/molecules";
import { 
  TextMedium,
  Heading2, 
  TextBase, 
  Heading5, 
  Divider, 
  Icons 
} from "@/src/components/atoms";
import { Tabs, CreateReportModal } from "@/src/components/organisms";
import { useCopyUrlToClipboard } from "@/src/hooks";
import { Routes } from "@/src/lib/constants";
import { ICard, ICardTabs } from "@/src/services";
import { useUser } from "@/src/store/user";

interface TripXLCardProps {
  card: ICard;
}

const TripXLCard: React.FC<TripXLCardProps> 
= forwardRef(({ card }, ref: Ref<HTMLDivElement> | undefined) => {
  const { user } = useUser();
  const [isCopied, copy] = useCopyUrlToClipboard(Routes.TRIP(card.id));
  const [isReportCardModal, setIsReportCardModal] = useState(false);
  const tabs: ICardTabs = {
    'Description': card.description,
    'Why this place?': card.whyThisPlace,
    'Distance': { value: card.distance, mapsLink: card.mapLink },
  };

  return (
    <motion.article
      initial={{ y: 100, opacity: 0 }}
      animate={{ y: 0, opacity: 1 }}
      exit={{ y: -100, opacity: 0 }}
      ref={ref}
      transition={{ duration: 0.3 }}
      className="flex h-fit w-[596px] flex-col items-center justify-between 
      gap-3 overflow-hidden rounded-4xl bg-white"
    >
      <Link 
        href={Routes.TRIP(card.id)} 
        className="relative mb-1 w-full pb-[50%]"
      >
        <TripImage 
          imageLinks={card.imageLinks} 
          alt={card.name} 
          sizes="(max-width: 768px) 100vw, 50vw"
        />

        {isCopied && (
          <span 
            className="absolute inset-x-8 top-8 flex 
              items-center justify-center rounded-2xl bg-white px-6 py-2"
          >
            <Heading5 
              text="Copied to clipboard!" 
              font="medium" 
              classes="text-gray-80" 
            />
          </span>
        )}
      </Link>

      <div className="flex w-full flex-col gap-3 px-8 pb-8">
        <div className="flex w-full gap-1 overflow-x-scroll">
          {card.tripTypes.map(tripType => (
            <TextMedium 
              key={tripType}
              text={tripType}
              font="normal"
              classes="rounded-full bg-gray-20 
                text-gray-80 px-3 py-1 shrink-0"
            />
          ))}
        </div>

        <div className="flex w-full flex-col gap-1">
          <Heading2 text={card.name} classes="self-start" font="semibold" />

          <div className="mb-1 flex w-full items-center gap-2">
            <Icons.location className="h-5 w-5 shrink-0" />
            <TextBase text={card.whereIs} font="medium"/>
          </div>
        </div>

        <Tabs tabs={tabs} location="Card" />

        <Divider />

        <div className="flex w-full items-center justify-between gap-4">
          <IconButton
            icon={card.author === "AI" 
              ? <Icons.jpt className="h-5 w-5 text-black" /> 
              : <Icons.user className="h-5 w-5 text-black" />
            }
            text={
              card.author === "AI" ? "Generated by AI" : `Posted by ${card.author}`
            }
            classes="text-gray-80 gap-2 overflow-hidden"
            truncateText={true}
          />
            
          <LikeButton
            cardId={card.id}
            cardLikes={card.likes}
            classes="text-gray-80 gap-2 disabled:text-gray-50"
          />

          <IconButton 
            icon={<Icons.share className="h-5 w-5 text-inherit" />} 
            onClick={copy}
            text="Share"
            classes="text-gray-80 gap-2"
          />

          <IconButton
            icon={
              <Icons.report 
                className="h-5 w-5 text-inherit" 
              />
            }
            text="Report"
            classes="text-gray-80 gap-2 disabled:text-gray-50"
            onClick={() => setIsReportCardModal(true)}
            disabled={!user}
          />
        </div>

        <Divider classes="mb-2" />

        <SaveButton cardId={card.id} />
      </div>

      <AnimatePresence>
        {isReportCardModal && (
          <CreateReportModal
            key="createReportModal"
            type="Card" 
            onClose={() => setIsReportCardModal(false)} 
          />
        )}
      </AnimatePresence>
    </motion.article>
  );
});

TripXLCard.displayName = 'TripXLCard';
export default memo(TripXLCard);